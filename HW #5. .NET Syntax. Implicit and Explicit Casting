#5. .NET Syntax. Implicit and Explicit Casting. Boxing and Unboxing.
1. В чем заключается основное различие между неявными и явными преобразованиями типов в C#?
Неявные преобразования происходит автоматически компилятором, а явные требуют явные указание от программиста. 
2. Можете ли вы привести пример неявного преобразования и объяснить, почему оно не требует специального синтаксиса?
int intValue = 10;
long longValue = intValue;
Тут не требуется специального синтаксиса, потому что long представляет собой более вместительный тип данных чем int, поэтому не требует специального синтаксиса так как оно считается безопасным.
3. Когда в C# может понадобиться выполнить явное преобразование (cast)? Приведите пример.
Явные преобразования могут понадобиться при преобразовании между числовыми типами. Например :
double doubleValue = 123.45;
int intValue = (int)doubleValue;
4. Что представляет собой процесс boxing в C#? Как тип значения преобразуется в тип объекта или интерфейса?
Процесс boxing представляет собой упаковку типа значения в объект соответствующего типа. При упаковке значение помещается в объектную оболочку, что позволяет ему быть храненным в виде объекта и использоваться в контекстах, где требуется объект.
5. Объясните концепцию unboxing и ее отличие от boxing. Почему разгруппировка является явной?
Boxing (упаковка) и Unboxing (разгруппировка) - это два процесса связанные с преобразованием между типами значения и типами объектов.
Boxing : представляет собой упаковку типа значения в объект соответствующего типа.
Unboxing : Разгруппировка происходит, когда значение из упакованного объекта извлекается и преобразуется обратно в исходный тип значения.
6. Как boxing и unboxing связаны с унифицированным представлением системы типов в C#?
Это в том, что в C# у нас есть единое "коробочное" (object) представление для всех типов, и мы можем помещать значения разных типов в эту "коробку" и вынимать их обратно.
