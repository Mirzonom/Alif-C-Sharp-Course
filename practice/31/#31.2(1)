using System;
using System.Linq;
using System.Reflection;

[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
sealed class LoggerAttribute : Attribute
{
    public string LoggerName { get; }

    public LoggerAttribute(string loggerName)
    {
        LoggerName = loggerName;
    }
}

[Logger("FileLogger")]
class MyClass1
{
    // Код класса
}

[Logger("ConsoleLogger")]
class MyClass2
{
    // Код класса
}

class Program
{
    static void Main()
    {
        PrintClassLoggers();
    }

    static void PrintClassLoggers()
    {
        // Получаем все типы в текущей сборке
        var types = Assembly.GetExecutingAssembly().GetTypes();

        foreach (var type in types)
        {
            // Проверяем, есть ли у типа атрибут LoggerAttribute
            var loggerAttribute = type.GetCustomAttributes(typeof(LoggerAttribute), false)
                                     .FirstOrDefault() as LoggerAttribute;

            if (loggerAttribute != null)
            {
                Console.WriteLine($"Class: {type.Name}, Logger: {loggerAttribute.LoggerName}");
            }
        }
    }
}
